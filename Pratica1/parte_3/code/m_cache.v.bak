module m_cache (clock, test_tag, test_data, test_wren);

// Declarando inputs
input clock, test_wren;
input [7:0] test_tag, test_data;

// Memoria principal
reg mp_clock, mp_wren;
reg [7:0]  mp_address, mp_data;
wire mp_out;

// Memoria cache
reg mc_wren;
reg [7:0] mc_address [0:3][0:1];
reg valido [0:3], dirty [0:3];
reg [0:1] lru [0:3];
reg mc_out;

// Intermediarias
Integer i, lastLRU, oldLRU, hitIndex, hit;

always@(test_tag) begin
	// Verificar se houve hit
	for (i=0; i<4; i=i+1) begin
		if(parada == 0) begin
			if(test_tag == mc_address[i][0] && valido[i] == 1) begin // Hit
				hitIndex = i;
				lastLRU = i;
				hit = 1;
				parada = 1;
			end
			else if(test_tag == mc_address[i][0] && valido[i] == 0) begin // Miss
				hitIndex = i;
				lastLRU = i;
				hit = 1;
				parada = 1;
			end
			else begin // Miss
				hit = 0;
			end
		end
	end
end

always@(posedge clock) begin

end

m_principal m_principal(mp_address, mp_clock, mp_data, mp_wren, mp_out);

endmodule
v